---
# tasks file for libvirt role
# This role configures libvirt virtualization environment on RHEL 9.5 systems

# Install core libvirt packages and dependencies
- name: Install required packages
  ansible.builtin.dnf:
    name:
      - libvirt
      - libvirt-client
      - qemu-kvm
      - virt-manager
      - virt-install
      - python3-libvirt
    state: present

# Ensure libvirtd service is running and enabled on boot
- name: Enable and start libvirtd service
  ansible.builtin.systemd:
    name: libvirtd
    state: started
    enabled: true

# Add specified user to libvirt group for management access
# Only runs when libvirt_user variable is defined
- name: Add user to libvirt group
  ansible.builtin.user:
    name: "{{ libvirt_user }}"
    groups: libvirt
    append: true
  when: libvirt_user is defined

# Configure libvirtd to use libvirt group for socket access
# This allows members of libvirt group to manage virtualization
- name: Set libvirtd unix_sock_group
  ansible.builtin.lineinfile:
    path: /etc/libvirt/libvirtd.conf
    regexp: '^#?\s*unix_sock_group\s*='
    line: 'unix_sock_group = "libvirt"'
    state: present
  register: sock_group_result

# Set appropriate permissions for libvirt socket
# 0770 allows group members read/write access
- name: Set libvirtd unix_sock_rw_perms
  ansible.builtin.lineinfile:
    path: /etc/libvirt/libvirtd.conf
    regexp: '^#?\s*unix_sock_rw_perms\s*='
    line: 'unix_sock_rw_perms = "0770"'
    state: present
  register: sock_perms_result

# Restart libvirtd service if socket configuration changed
# Ensures new permissions take effect
- name: Restart libvirtd service
  ansible.builtin.systemd:
    name: libvirtd
    state: restarted
  when: sock_group_result.changed or sock_perms_result.changed

# Set up default network
- name: Create default network XML file
  ansible.builtin.copy:
    dest: /tmp/default-net.xml
    content: |
      <network>
        <name>default</name>
        <forward mode='nat'/>
        <bridge name='virbr0' stp='on' delay='0'/>
        <ip address='192.168.122.1' netmask='255.255.255.0'>
          <dhcp>
            <range start='192.168.122.2' end='192.168.122.254'/>
          </dhcp>
        </ip>
      </network>

- name: Define default network
  ansible.builtin.command:
    cmd: virsh net-define /tmp/default-net.xml
  register: net_define
  changed_when: net_define.rc == 0
  failed_when: net_define.rc != 0 and 'already exists' not in net_define.stderr

- name: Start default network
  ansible.builtin.command:
    cmd: virsh net-start default
  register: net_start
  changed_when: net_start.rc == 0
  failed_when: net_start.rc != 0 and 'already active' not in net_start.stderr

- name: Check if default network autostart is enabled
  ansible.builtin.command:
    cmd: virsh net-info default
  register: net_info
  changed_when: false

- name: Enable default network autostart
  ansible.builtin.command:
    cmd: virsh net-autostart default
  register: net_autostart
  changed_when: net_autostart.rc == 0 and 'already marked' not in net_autostart.stderr
  failed_when: net_autostart.rc != 0 and 'already marked' not in net_autostart.stderr
  when: "'yes' not in net_info.stdout"

# Check if VM exists and remove it if it does
- name: Check if VM exists
  ansible.builtin.command:
    cmd: virsh dominfo centos9-test
  register: vm_exists
  ignore_errors: true
  changed_when: false

- name: Get VM state if it exists
  ansible.builtin.command:
    cmd: virsh domstate centos9-test
  register: vm_state
  when: vm_exists.rc == 0
  ignore_errors: true
  changed_when: false

- name: Stop existing VM if running
  ansible.builtin.command:
    cmd: virsh destroy centos9-test
  when: 
    - vm_exists.rc == 0 
    - vm_state.stdout is defined
    - vm_state.stdout == "running"
  register: vm_stop
  changed_when: vm_stop.rc == 0

- name: Remove existing VM if it exists
  ansible.builtin.command:
    cmd: virsh undefine centos9-test --remove-all-storage
  when: vm_exists.rc == 0
  register: vm_remove
  changed_when: vm_remove.rc == 0

# Download CentOS 9 cloud image if it doesn't exist
- name: Check if CentOS 9 cloud image exists
  ansible.builtin.stat:
    path: /var/lib/libvirt/images/centos9-test.qcow2
  register: cloud_image

- name: Download CentOS 9 cloud image
  ansible.builtin.get_url:
    url: https://cloud.centos.org/centos/9-stream/x86_64/images/CentOS-Stream-GenericCloud-9-latest.x86_64.qcow2
    dest: /var/lib/libvirt/images/centos9-test.qcow2
    mode: '0644'
    force: false
  when: not cloud_image.stat.exists
  register: image_download

# Create cloud-init config
- name: Create cloud-init config directory
  ansible.builtin.file:
    path: /tmp/cloud-init
    state: directory
    mode: '0755'

- name: Create cloud-init user-data
  ansible.builtin.copy:
    dest: /tmp/cloud-init/user-data
    content: |
      #cloud-config
      users:
        - name: cloud-user
          sudo: ALL=(ALL) NOPASSWD:ALL
          ssh_authorized_keys:
            - {{ lookup('file', '/home/lab-user/.ssh/cluster-key.pub') }}

- name: Create cloud-init meta-data
  ansible.builtin.copy:
    dest: /tmp/cloud-init/meta-data
    content: |
      instance-id: centos9-test
      local-hostname: centos9-test

- name: Check if cloud-init ISO exists
  ansible.builtin.stat:
    path: /tmp/cloud-init.iso
  register: cloud_init_iso

- name: Create cloud-init ISO
  ansible.builtin.command:
    cmd: >-
      genisoimage -output /tmp/cloud-init.iso
      -volid cidata -joliet -rock
      /tmp/cloud-init/user-data /tmp/cloud-init/meta-data
  when: not cloud_init_iso.stat.exists
  register: iso_create
  changed_when: iso_create.rc == 0

# Create the VM with proper disk size
- name: Create CentOS 9 test VM
  ansible.builtin.command:
    cmd: >-
      virt-install
      --name centos9-test
      --memory 2048
      --vcpus 2
      --disk size=20,path=/var/lib/libvirt/images/centos9-test.qcow2
      --disk path=/tmp/cloud-init.iso,device=cdrom
      --import
      --os-variant centos-stream9
      --network network=default
      --noautoconsole
  register: vm_create
  failed_when:
    - vm_create.rc != 0
    - "'domain is already defined' not in vm_create.stderr"
  changed_when: vm_create.rc == 0

# Wait for VM to be running
- name: Wait for VM to be running
  ansible.builtin.command:
    cmd: virsh domstate centos9-test
  register: vm_state
  until: vm_state.stdout == "running"
  retries: 30
  delay: 10
  changed_when: false

# Get VM IP address
- name: Get VM IP address
  ansible.builtin.shell:
    cmd: virsh domifaddr centos9-test | grep -oE '([0-9]{1,3}\.){3}[0-9]{1,3}'
  register: vm_ip
  until: vm_ip.stdout != ""
  retries: 30
  delay: 10
  changed_when: false

# Wait for SSH to be available
- name: Wait for SSH to come up
  ansible.builtin.wait_for:
    host: "{{ vm_ip.stdout }}"
    port: 22
    delay: 10
    timeout: 300
  changed_when: false

# Check if test file exists
- name: Check if test file exists
  ansible.builtin.command:
    cmd: >-
      ssh -i /home/lab-user/.ssh/cluster-key
      -o StrictHostKeyChecking=no
      cloud-user@{{ vm_ip.stdout }}
      "test -f ~/test.txt"
  register: test_file_exists
  ignore_errors: true
  changed_when: false

# Test SSH connectivity by creating a file only if it doesn't exist
- name: Create test file via SSH
  ansible.builtin.command:
    cmd: >-
      ssh -i /home/lab-user/.ssh/cluster-key
      -o StrictHostKeyChecking=no
      cloud-user@{{ vm_ip.stdout }}
      "echo 'Test successful' > ~/test.txt"
  register: ssh_result
  retries: 30
  delay: 10
  until: ssh_result.rc == 0
  when: test_file_exists.rc != 0
  changed_when: ssh_result.rc == 0

- name: Show test results
  ansible.builtin.debug:
    var: ssh_result.stdout

# Add a pause to allow all services to fully start
- name: Wait for all services to stabilize
  ansible.builtin.pause:
    seconds: 120
  when: vm_exists.rc != 0 or vm_remove.rc == 0

# Create SSH key if it doesn't exist
- name: Create SSH key directory
  ansible.builtin.file:
    path: /home/lab-user/.ssh
    state: directory
    mode: '0700'
    owner: lab-user
    group: users

- name: Generate SSH key
  ansible.builtin.command:
    cmd: ssh-keygen -t rsa -b 2048 -f /home/lab-user/.ssh/cluster-key -N ''
  args:
    creates: /home/lab-user/.ssh/cluster-key

- name: Set SSH key permissions
  ansible.builtin.file:
    path: "{{ item }}"
    mode: '0600'
    owner: lab-user
    group: users
  loop:
    - /home/lab-user/.ssh/cluster-key
    - /home/lab-user/.ssh/cluster-key.pub
